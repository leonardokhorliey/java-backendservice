package com.ebubeokoli.postservice.model;
// Generated May 28, 2015 9:05:46 AM by Hibernate Tools 3.1.0.beta4

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Field;
import java.nio.file.Files;
import java.nio.file.Path;

import org.hibernate.annotations.Type;

import lombok.EqualsAndHashCode;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.core.env.Environment;

import com.ebubeokoli.postservice.helpers.JsonToClass;

import org.json.JSONArray;
import org.json.JSONObject;

/**
 * WpUsers generated by hbm2java
 */

@Entity
@Table(name="users")
@EqualsAndHashCode
public class User {
    private static Environment env;
    
    private final static String dbPath = env.getProperty("userDbPath");

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
     private Long id;

	@Column(name = "email", nullable = false)
    private String email;

    @Column(name = "password", nullable = false)
     private String password;
    
    @Column(name = "username", nullable = false)
     private String username;
    
	public User(Long id, String email, String password, String username) {
        this.id = id;
        this.email = email;
        this.password = new BCryptPasswordEncoder().encode(password); 
        this.username = username;
    }

    public User() {
	}

    public Long getId() {
        return this.id;
    }
    
    public void setId(Long id) {
        this.id = id;
    }

    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
		this.password = new BCryptPasswordEncoder().encode(password); 
    }


    public String getEmail() {
        return this.email;
    }
    
    public void setEmail(String email) {
        this.email = email;
    }

	public String getUsername() {
		return username;
	}

	public void setUsername(String name) {
		this.username = name;
	}

	@Override
	public String toString() {
		return "User {\"id\": \"" + id + "\", \"email\":\"" + email + "\", \"password\":\""
				+ password + "\", \"username\":\"" + username + "\"}";
	}

    public static User fromJsonString(String jsonString) {

        JSONObject obj = new JSONObject(jsonString);
        String[] nullables = {};

        User user;

        if (JsonToClass.convertJsonToClass(obj, User.class, nullables)) {

            user = new User(Long.parseLong(obj.getString("id"))
            , obj.getString("email")
            , obj.getString("password")
            , obj.getString("username")
            );
        }

        return user;
    }

    public static String database() {

        Path userDbPath = Path.of(dbPath);
        String userData = Files.readString(userDbPath);

        return userData;
    }

    public boolean save() throws IOException {
        FileWriter writer = new FileWriter(dbPath);

        String user = this.toString() + ";\n";

        writer.append(user);
        writer.close();
    }

}
